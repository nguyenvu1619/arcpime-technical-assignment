-- Create disclosures table with all invention fields
CREATE TABLE disclosures (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    docket_number INT GENERATED BY DEFAULT AS IDENTITY,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    key_differences JSONB NOT NULL,
    inventors JSONB NOT NULL,
    uri TEXT,
    raw_extraction JSONB, 
    public_planned BOOLEAN DEFAULT FALSE,
    public_venue TEXT,
    public_date TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create unique index on docket_number for fast lookups and uniqueness
CREATE UNIQUE INDEX idx_disclosures_docket ON disclosures(docket_number);

-- Create index on created_at for sorting
CREATE INDEX idx_disclosures_created_at ON disclosures(created_at DESC);
-- Helpful filter index
CREATE INDEX IF NOT EXISTS idx_disclosures_public_planned ON disclosures(public_planned);

-- Events table for outbox pattern
CREATE TABLE IF NOT EXISTS events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    topic TEXT NOT NULL,
    name TEXT NOT NULL,
    key TEXT NOT NULL,
    payload JSONB NOT NULL,
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed')),
    attempt_count INT DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Helpful indexes
CREATE INDEX IF NOT EXISTS idx_events_topic_name ON events(topic, name);
CREATE INDEX IF NOT EXISTS idx_events_status_created ON events(status, created_at);

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_disclosures_updated_at 
    BEFORE UPDATE ON disclosures 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();